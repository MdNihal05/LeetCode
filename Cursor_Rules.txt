

### **1. General Coding Rules (Applicable to All Projects)**

These principles ensure consistency, readability, and efficiency across both frontend and backend development.

#### **1.1 SOLID Principles**
- **Single Responsibility Principle**: Each class, module, or function should have one purpose or reason to change.
- **Open-Closed Principle**: Code should be open for extension but closed for modification (e.g., use polymorphism).
- **Liskov Substitution Principle**: Subclasses should be substitutable for their base classes without breaking functionality.
- **Interface Segregation Principle**: Avoid forcing modules to depend on interfaces they don’t use; keep interfaces small and specific.
- **Dependency Inversion Principle**: Depend on abstractions (e.g., interfaces) rather than concrete implementations.

#### **1.2 Good Comments**
- Write comments to explain **why** code exists, not just **what** it does.
- Use documentation tools like **JSDoc** for functions, classes, and modules.
- Avoid redundant comments (e.g., `// Set x to 5` above `x = 5`).

**Example**:
```javascript
// Calculate tax based on regional rules; assumes rate includes VAT
function calculateTax(amount, rate) {
  return amount * rate;
}
```

#### **1.3 Good File Structure**
- Organize files by **feature** or **module** (e.g., `/users`, `/auth`) rather than type (e.g., `/controllers`).
- Use consistent naming: `camelCase` for variables/functions, `PascalCase` for classes/components.
- Group related files (e.g., `UserComponent.tsx`, `UserComponent.css`, `UserComponent.test.ts`).

**Example Structure**:
```
src/
├── components/         # Reusable UI components
│   ├── Button/
│   │   ├── Button.tsx
│   │   ├── Button.css
│   │   └── Button.test.tsx
├── services/          # API or business logic
│   ├── api.ts
│   └── auth.ts
├── models/            # Data types or schemas
│   └── user.ts
```

#### **1.4 Great Coding Patterns & Designs**
- Use established patterns like **MVC**, **Singleton**, or **Factory** where appropriate.
- Favor **composition** over inheritance for flexibility.
- Implement **event-driven** or **observer** patterns for decoupled systems.

#### **1.5 Graceful Error Handling**
- Use `try-catch` blocks for operations that might fail (e.g., API calls, file I/O).
- Return meaningful error messages to users or logs.
- Avoid silent failures; always handle or propagate errors.

**Example**:
```javascript
async function fetchData(url) {
  try {
    const response = await fetch(url);
    if (!response.ok) throw new Error(`HTTP error ${response.status}`);
    return await response.json();
  } catch (error) {
    console.error(`Failed to fetch data: ${error.message}`);
    throw error; // Propagate for higher-level handling
  }
}
```

#### **1.6 Short and Readable Code**
- Keep functions short (<50-100 lines) and focused on a single task.
- Use descriptive names (e.g., `getUserById` instead of `get`).
- Break complex logic into smaller, named functions.

**Example**:
```javascript
function processUserData(user) {
  const fullName = formatName(user.firstName, user.lastName);
  const ageGroup = categorizeAge(user.age);
  return { fullName, ageGroup };
}

function formatName(first, last) {
  return `${first} ${last}`;
}

function categorizeAge(age) {
  return age < 30 ? "Young" : "Adult";
}
```

#### **1.7 Modular & Reusable Code**
- Extract common logic into reusable modules or utilities.
- Use **dependency injection** to reduce coupling.
- Avoid duplicating code; follow DRY (Don’t Repeat Yourself).

**Example**:
```javascript
// utils/math.ts
export const add = (a, b) => a + b;
export const multiply = (a, b) => a * b;
```

#### **1.8 Error-Free Code**
- Use **TypeScript** for static type checking; define interfaces/types for all data.
- Configure **ESLint** and **Prettier** to enforce consistent style and catch errors.
- Run `tsc --noEmit` and `eslint .` before committing code.

**Example**:
```typescript
interface User {
  id: number;
  name: string;
}

function greet(user: User): string {
  return `Hello, ${user.name}!`;
}
```

#### **1.9 Efficient Code**
- Optimize critical sections (e.g., use `Map` instead of arrays for lookups).
- Avoid unnecessary loops or computations; memoize where applicable.
- Profile performance before optimizing to avoid premature effort.

---

### **2. Frontend-Specific Rules**

These rules focus on client-side development, emphasizing UI, responsiveness, and user experience.

#### **2.1 UI/UX Best Practices**
- Adhere to design specifications for consistency.
- Use CSS frameworks (e.g., Tailwind, Bootstrap) or custom styles with a clear theme.
- Implement smooth transitions/animations for better UX.

#### **2.2 Responsiveness & Accessibility**
- Use **media queries**, **flexbox**, or **grid** for responsive layouts.
- Follow **WCAG** guidelines (e.g., sufficient contrast, keyboard navigation).
- Add **ARIA** attributes to improve screen reader support.

**Example**:
```html
<button aria-label="Submit form" className="btn">Submit</button>
```

#### **2.3 State Management**
- Use **React Context** or **Redux** for global state in complex apps.
- Keep state local (e.g., in components) when possible.
- Avoid overusing global state to reduce complexity.

**Example**:
```typescript
// context/AuthContext.tsx
import { createContext, useState } from "react";

export const AuthContext = createContext({ user: null, setUser: () => {} });

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  return (
    <AuthContext.Provider value={{ user, setUser }}>
      {children}
    </AuthContext.Provider>
  );
};
```

#### **2.4 Component Architecture**
- Build small, reusable components with clear props interfaces.
- Use **hooks** for logic reuse (e.g., `useEffect`, custom hooks).
- Pass data via props and use callbacks for parent-child communication.

**Example**:
```typescript
interface ButtonProps {
  label: string;
  onClick: () => void;
}

const Button = ({ label, onClick }: ButtonProps) => (
  <button onClick={onClick}>{label}</button>
);
```

#### **2.5 Cursor Handling (UI Context)**
- Set **CSS cursor styles** for interactive elements (e.g., `cursor: pointer` for buttons).
- Manage **text cursor** behavior in inputs (e.g., focus, selection).

**Example**:
```css
button:hover {
  cursor: pointer;
}

input:focus {
  outline: none;
  cursor: text;
}
```

---

### **3. Backend-Specific Rules**

These rules focus on server-side development, emphasizing APIs, databases, and scalability.

#### **3.1 API Design**
- Follow **RESTful** conventions (e.g., `/users/:id`) or **GraphQL** schema design.
- Use consistent naming and proper HTTP methods (GET, POST, etc.).
- Return standard responses with status codes and JSON payloads.

**Example**:
```typescript
// routes/users.ts
import express from "express";
const router = express.Router();

router.get("/users/:id", async (req, res) => {
  try {
    const user = await getUserById(req.params.id);
    if (!user) return res.status(404).json({ error: "User not found" });
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: "Server error" });
  }
});
```

#### **3.2 Database Interactions**
- Use **ORMs** (e.g., Sequelize, TypeORM) or query builders for safety and readability.
- Optimize queries with indexes and avoid N+1 problems.
- **Cursor Usage**: Use cursors for large datasets to reduce memory usage.

**Example (PostgreSQL with Node.js)**:
```javascript
const { Pool } = require("pg");
const pool = new Pool({ /* config */ });

async function processLargeDataset() {
  const client = await pool.connect();
  try {
    const cursor = client.query("DECLARE my_cursor CURSOR FOR SELECT * FROM users");
    let rows;
    do {
      rows = await client.query("FETCH 1000 FROM my_cursor");
      for (const row of rows.rows) {
        console.log(row);
      }
    } while (rows.rows.length > 0);
    await client.query("CLOSE my_cursor");
  } finally {
    client.release();
  }
}
```

#### **3.3 Security Practices**
- Implement **JWT** or **OAuth** for authentication.
- Validate and sanitize all inputs to prevent injection attacks.
- Use **HTTPS** and secure headers (e.g., CSP, HSTS).

#### **3.4 Scalability Considerations**
- Design **stateless services** for easy scaling.
- Use **caching** (e.g., Redis) for frequent queries.
- Implement **load balancing** for high traffic.

#### **3.5 Logging & Monitoring**
- Log errors, warnings, and key events using tools like **Winston** or **Pino**.
- Monitor performance with tools like **Prometheus** or **New Relic**.
- Set up alerts for critical failures.

**Example**:
```javascript
const winston = require("winston");
const logger = winston.createLogger({
  level: "info",
  format: winston.format.json(),
  transports: [new winston.transports.File({ filename: "app.log" })],
});

logger.error("Database connection failed", { error });
```
